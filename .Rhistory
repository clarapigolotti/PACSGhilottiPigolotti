yy = matrix(y, nrow = n*n, ncol = 1)
zz = matrix(z, nrow = n*n, ncol = 1)
grid = cbind(xx[,1],yy[,1],zz[,1])
d = mixture_true(grid, mod1, mod2, mod3, mod4)
eval_d <- matrix(d, nrow =n, ncol = n)
# full colored image
surf3Drgl(x, y, z, colvar = eval_d, colkey = TRUE, border = "black", box = FALSE)
pch3d(data1, pch=19, cex=0.3,  col="red")
pch3d(data2, pch=19, cex=0.3, col="yellow")
pch3d(data3, pch=19, cex=0.3, col="pink")
pch3d(data4, pch=19, cex=0.3, col="orange")
persp3Drgl(z=eval_d)
while (rgl.cur() > 0) { rgl.close() }
ndata=400
mu1 <- c(-1,1,0.6)
mu1 <- mu1 / sqrt( sum(mu1^2) )
k1=30
beta1=7
data1 <- rkent(ndata/4, k1, mu1, beta1)
mu2 <- c(1, 1, 0.6)
mu2 <- mu2 / sqrt( sum(mu2^2) )
k2=15
beta2=5
data2 <- rkent(ndata/4, k2, mu2, beta2)
mu3 <- c(1, 1, -0.6)
mu3 <- mu3 / sqrt( sum(mu3^2) )
k3=30
beta3=5
data3 <- rkent(ndata/4, k3, mu3, beta3)
mu4 <- c(-1, 1, -0.6)
mu4 <- mu4 / sqrt( sum(mu4^2) )
k4=20
beta4=5
data4 <- rkent(ndata/4, k4, mu4, beta4)
open3d()
pch3d(data1, pch=19, cex=0.3,  col="red")
pch3d(data2, pch=19, cex=0.3, col="blue")
pch3d(data3, pch=19, cex=0.3, col="green")
pch3d(data4, pch=19, cex=0.3, col="orange")
mod1 <- kent.mle(data1)
mod2 <- kent.mle(data2)
mod3 <- kent.mle(data3)
mod4 <- kent.mle(data4)
# grid
n=100
X       <- seq(0, pi, length.out = n)
Y       <- seq(0, 2*pi, length.out = n)
M       <- mesh(X, Y)
phi     <- M$x
theta   <- M$y
# x, y and z grids
r <- 1
x = sin(phi) * cos(theta)
y = sin(phi) * sin(theta)
z = cos(phi)
xx = matrix(x, nrow = n*n, ncol = 1)
yy = matrix(y, nrow = n*n, ncol = 1)
zz = matrix(z, nrow = n*n, ncol = 1)
grid = cbind(xx[,1],yy[,1],zz[,1])
d = mixture_true(grid, mod1, mod2, mod3, mod4)
eval_d <- matrix(d, nrow =n, ncol = n)
# full colored image
surf3Drgl(x, y, z, colvar = eval_d, colkey = TRUE, border = "black", box = FALSE)
pch3d(data1, pch=19, cex=0.3,  col="red")
pch3d(data2, pch=19, cex=0.3, col="yellow")
pch3d(data3, pch=19, cex=0.3, col="pink")
pch3d(data4, pch=19, cex=0.3, col="orange")
persp3Drgl(z=eval_d)
ndata=400
mu1 <- c(-0.6,1,0.6)
mu1 <- mu1 / sqrt( sum(mu1^2) )
k1=30
beta1=7
data1 <- rkent(ndata/4, k1, mu1, beta1)
mu2 <- c(0.6, 1, 0.6)
mu2 <- mu2 / sqrt( sum(mu2^2) )
k2=15
beta2=5
data2 <- rkent(ndata/4, k2, mu2, beta2)
mu3 <- c(0.6, 1, -0.6)
mu3 <- mu3 / sqrt( sum(mu3^2) )
k3=30
beta3=5
data3 <- rkent(ndata/4, k3, mu3, beta3)
mu4 <- c(-0.6, 1, -0.6)
mu4 <- mu4 / sqrt( sum(mu4^2) )
k4=20
beta4=5
data4 <- rkent(ndata/4, k4, mu4, beta4)
open3d()
pch3d(data1, pch=19, cex=0.3,  col="red")
pch3d(data2, pch=19, cex=0.3, col="blue")
pch3d(data3, pch=19, cex=0.3, col="green")
pch3d(data4, pch=19, cex=0.3, col="orange")
mod1 <- kent.mle(data1)
mod2 <- kent.mle(data2)
mod3 <- kent.mle(data3)
mod4 <- kent.mle(data4)
# grid
n=100
X       <- seq(0, pi, length.out = n)
Y       <- seq(0, 2*pi, length.out = n)
M       <- mesh(X, Y)
phi     <- M$x
theta   <- M$y
# x, y and z grids
r <- 1
x = sin(phi) * cos(theta)
y = sin(phi) * sin(theta)
z = cos(phi)
xx = matrix(x, nrow = n*n, ncol = 1)
yy = matrix(y, nrow = n*n, ncol = 1)
zz = matrix(z, nrow = n*n, ncol = 1)
grid = cbind(xx[,1],yy[,1],zz[,1])
d = mixture_true(grid, mod1, mod2, mod3, mod4)
eval_d <- matrix(d, nrow =n, ncol = n)
# full colored image
surf3Drgl(x, y, z, colvar = eval_d, colkey = TRUE, border = "black", box = FALSE)
pch3d(data1, pch=19, cex=0.3,  col="red")
pch3d(data2, pch=19, cex=0.3, col="yellow")
pch3d(data3, pch=19, cex=0.3, col="pink")
pch3d(data4, pch=19, cex=0.3, col="orange")
persp3Drgl(z=eval_d)
library(Directional)
library(fdaPDE)
mixture_true <- function(x,mod1, mod2, mod3, mod4) {
(0.25*kent.density(x, G= mod1$G, param=mod1$param) +
0.25*kent.density(x, G=mod2$G, param=mod2$param) +
0.25*kent.density(x, G=mod3$G, param=mod3$param) +
0.25*kent.density(x, G=mod4$G, param=mod4$param)
)
}
ndata=400
mu1 <- c(-0.6,1,0.6)
mu1 <- mu1 / sqrt( sum(mu1^2) )
k1=30
beta1=7
data1 <- rkent(ndata/4, k1, mu1, beta1)
mu2 <- c(0.6, 1, 0.6)
mu2 <- mu2 / sqrt( sum(mu2^2) )
k2=15
beta2=5
data2 <- rkent(ndata/4, k2, mu2, beta2)
mu3 <- c(0.6, 1, -0.6)
mu3 <- mu3 / sqrt( sum(mu3^2) )
k3=30
beta3=5
data3 <- rkent(ndata/4, k3, mu3, beta3)
mu4 <- c(-0.6, 1, -0.6)
mu4 <- mu4 / sqrt( sum(mu4^2) )
k4=20
beta4=5
data4 <- rkent(ndata/4, k4, mu4, beta4)
mod1 <- kent.mle(data1)
mod2 <- kent.mle(data2)
mod3 <- kent.mle(data3)
mod4 <- kent.mle(data4)
# grid
n=100
X       <- seq(0, pi, length.out = n)
Y       <- seq(0, 2*pi, length.out = n)
M       <- mesh(X, Y)
phi     <- M$x
theta   <- M$y
# x, y and z grids
r <- 1
x = sin(phi) * cos(theta)
y = sin(phi) * sin(theta)
z = cos(phi)
xx = matrix(x, nrow = n*n, ncol = 1)
yy = matrix(y, nrow = n*n, ncol = 1)
zz = matrix(z, nrow = n*n, ncol = 1)
grid = cbind(xx[,1],yy[,1],zz[,1])
d = mixture_true(grid, mod1, mod2, mod3, mod4)
eval_d <- matrix(d, nrow =n, ncol = n)
# full colored image
surf3Drgl(x, y, z, colvar = eval_d, colkey = TRUE, border = "black", box = FALSE)
d = mixture_true(grid, mod1, mod2, mod3, mod4)
d = mixture_true(m, mod1, mod2, mod3, mod4)
library(TDA)
# kde
d_kde = kde (data, grid, h)
eval_kde <- matrix(d_kde, nrow =n, ncol = n)
data=rbind(data1, data2, data3, data4)
# kde
d_kde = kde (data, grid, h)
eval_kde <- matrix(d_kde, nrow =n, ncol = n)
h=0.29
# kde
d_kde = kde (data, grid, h)
eval_kde <- matrix(d_kde, nrow =n, ncol = n)
surf3Drgl(x, y, z, colvar = eval_kde, colkey = TRUE, border = "black", NAcol="blue", alpha=0.5)
log(1e-13)
log(1e-13)*100
exp(log(1e-13))
exp(log(1e-13)*100)
1e-13 * 100
exp/1e-11
exp(1e-11)
exp(-29)
exp(-299)
exp(-2990)
log(0.5)
log(0.5)*100
log(2)
log(2)*2
log(2)*100
exp(1e-13)
exp(1e-13*100)
library(fdaPDE)
## Create a 2D mesh over a squared domain
Xbound <- seq(-3, 3, length.out = 10)
Ybound <- seq(-3, 3, length.out = 10)
grid_XY <- expand.grid(Xbound, Ybound)
Bounds <- grid_XY[(grid_XY$Var1 %in% c(-3, 3)) | (grid_XY$Var2 %in% c(-3, 3)), ]
mesh <- create.mesh.2D(nodes = Bounds, order = 1)
mesh <- refine.mesh.2D(mesh, maximum_area = 0.2)
FEMbasis <- create.FEM.basis(mesh)
## Generate data
n <- 100
set.seed(10)
data_x <- rnorm(n)
data_y <- rnorm(n)
data <- cbind(data_x, data_y)
plot(mesh)
points(data, col="red", pch=19, cex=0.5)
## Density Estimation
lambda = c(0.1,1)
sol <- FEM.density(data = data, FEMbasis = FEMbasis, lambda = lambda, fvec=NULL, heatStep=0.1,
heatIter=500, stepProposals=NULL, tol1=1e-4, tol2=0, print=FALSE, nThreads_int=1,
nThreads_l=2, nThreads_fold=1, nfolds=2, nsimulations=500,
step_method = "Fixed_Step", direction_method = "BFGS",
preprocess_method="RightCV")
## Visualization
n = 100
X <- seq(-3, 3, length.out = n)
Y<- seq(-3, 3, length.out = n)
grid <- expand.grid(X, Y)
evaluation <- eval.FEM(FEM(FEMbasis, coeff = sol$g), locations = grid)
evaluation <- exp(evaluation)
eval <- matrix(evaluation, n, n)
image2D(x=X, y=Y, z=eval, col=heat.colors(100), xlab="x",ylab="y", contour=list(drawlabels = FALSE), main = "Estimated density")
library(fdaPDE)
## Create a 2D mesh over a squared domain
Xbound <- seq(-3, 3, length.out = 10)
Ybound <- seq(-3, 3, length.out = 10)
grid_XY <- expand.grid(Xbound, Ybound)
Bounds <- grid_XY[(grid_XY$Var1 %in% c(-3, 3)) | (grid_XY$Var2 %in% c(-3, 3)), ]
mesh <- create.mesh.2D(nodes = Bounds, order = 1)
mesh <- refine.mesh.2D(mesh, maximum_area = 0.2)
FEMbasis <- create.FEM.basis(mesh)
## Generate data
n <- 50
set.seed(10)
data_x <- rnorm(n)
data_y <- rnorm(n)
data <- cbind(data_x, data_y)
plot(mesh)
points(data, col="red", pch=19, cex=0.5)
## Density Estimation
lambda = 0.1
t1 <- proc.time()
sol <- FEM.density(data = data, FEMbasis = FEMbasis, lambda = lambda, fvec=NULL, heatStep=0.1,
heatIter=500, stepProposals=NULL, tol1=1e-4, tol2=0, print=FALSE, nThreads_int=2,
nThreads_l=1, nThreads_fold=1, nfolds=NULL, nsimulations=500,
step_method = "Fixed_Step", direction_method = "BFGS",
preprocess_method="NoCrossValidation")
print(proc.time()-t1)
## Visualization
n = 100
X <- seq(-3, 3, length.out = n)
Y<- seq(-3, 3, length.out = n)
grid <- expand.grid(X, Y)
evaluation <- eval.FEM(FEM(FEMbasis, coeff = sol$g), locations = grid)
evaluation <- exp(evaluation)
eval <- matrix(evaluation, n, n)
image2D(x=X, y=Y, z=eval, col=heat.colors(100), xlab="x",ylab="y", contour=list(drawlabels = FALSE), main = "Estimated density")
rm(list=ls())
graphics.off()
library(fdaPDE)
help(fdaPDE)
??fdaPDE
install.packages("/home/clara/Scaricati/PACSGhilottiPigolotti-master", type='source', repos=NULL)
install.packages("/home/clara/Scaricati/PACSGhilottiPigolotti-master", type=’source’, repos=NULL)
install.packages("/home/clara/Scaricati/PACSGhilottiPigolotti-master", type='source', repos=NULL)
install.packages("/home/clara/Scaricati/Pr--ove/PACSGhilottiPigolotti-master", type='source', repos=NULL)
install.packages("home/clara/Scaricati/Pr--ove/PACSGhilottiPigolotti-master", type='source', repos=NULL)
remove.packages("fdaPDE")
install.packages("home/clara/Scaricati/Prove/PACSGhilottiPigolotti-master", type='source', repos=NULL)
remove.packages("fdaPDE")
remove.packages("fdaPDE")
install.packages("/home/clara/Documenti/fdaPDE_versioni/pacsColliColombo-master", type="source", repos=NULL)
myfunction <- function(data){
i<-1
check<-1
while(i<length(data) && check==1){
if(data[i]!=data[i+1]-1){
check<-0
}
}
}
myfunction <- function(data){
i<-1
check<-1
while(i<length(data) && check==1){
if(data[i]!=data[i+1]-1){
check<-0
}
}
check
}
data <- c(1,2,3,4,5)
myfunction(data)
myfunction <- function(data){
i<-1
check<-1
while(i<length(data) && check==1){
if(data[i]!=data[i+1]-1){
check<-0
}
}
check
}
data <- c(1,2)
myfunction(data)
data <- c(1,2)
i<-1
check<-1
while(i<length(data) && check==1){
if(data[i]!=data[i+1]-1){
check<-0
}
}
i<length(data)
length(data)
data[i]!=data[i+1]-1
data[i]
data[i+1]-1
check<-0
myfunction <- function(data){
i<-1
check<-1
while(i<length(data) && check==1){
if(data[i]!=data[i+1]-1){
check<-0
}
}
pritnf(check)
}
data <- c(1,2)
myfunction(data)
myfunction <- function(data){
i<-1
check<-1
while(i<length(data) && check==1){
pritnf(check)
if(data[i]!=data[i+1]-1){
check<-0
}
}
check
}
data <- c(1,2)
myfunction(data)
myfunction <- function(data){
i<-1
check<-1
while(i<length(data) && check==1){
printf(check)
if(data[i]!=data[i+1]-1){
check<-0
}
}
check
}
data <- c(1,2)
myfunction(data)
myfunction <- function(data){
i<-1
check<-1
while(i<length(data) && check==1){
print(check)
if(data[i]!=data[i+1]-1){
check<-0
}
}
check
}
data <- c(1,2)
myfunction(data)
myfunction <- function(data){
i<-1
check<-1
while(i<length(data) && check==1){
print(check)
if(data[i]!=data[i+1]-1){
check<-0
}
i <- i+1
}
check
}
data <- c(1,2)
myfunction(data)
myfunction <- function(data){
i<-1
check<-1
while(i<length(data) && check==1){
if(data[i]!=data[i+1]-1){
check<-0
}
i <- i+1
}
check
}
data <- c(1,2)
res <- myfunction(data)
res
myfunction <- function(data){
i<-1
check<-1
while(i<length(data) && check==1){
if(data[i]!=data[i+1]-1){
check<-0
}
i <- i+1
}
check
}
data <- c(1,2,4)
res <- myfunction(data)
res
ndata=200
mu1 <- c(-0.3, -0.5, 0.9)
mu1 <- mu1 / sqrt( sum(mu1^2) )
k1=18
beta1=3
data1 <- rkent(ndata/4, k1, mu1, beta1)
mu2 <- c(-0.3, -0.5, 0.2)
mu2 <- mu2 / sqrt( sum(mu2^2) )
k2=15
beta2=3
data2 <- rkent(ndata/4, k2, mu2, beta2)
mu3 <- c(0.6, -0.5, 0.8)
mu3 <- mu3 / sqrt( sum(mu3^2) )
k3=20
beta3=5
data3 <- rkent(ndata/4, k3, mu3, beta3)
mu4 <- c(0.2, -1, 0.2)
mu4 <- mu4 / sqrt( sum(mu4^2) )
k4=20
beta4=0
data4 <- rkent(ndata/4, k4, mu4, beta4)
data=rbind(data1, data2, data3, data4)
library(Directional)
ndata=200
mu1 <- c(-0.3, -0.5, 0.9)
mu1 <- mu1 / sqrt( sum(mu1^2) )
k1=18
beta1=3
data1 <- rkent(ndata/4, k1, mu1, beta1)
mu2 <- c(-0.3, -0.5, 0.2)
mu2 <- mu2 / sqrt( sum(mu2^2) )
k2=15
beta2=3
data2 <- rkent(ndata/4, k2, mu2, beta2)
mu3 <- c(0.6, -0.5, 0.8)
mu3 <- mu3 / sqrt( sum(mu3^2) )
k3=20
beta3=5
data3 <- rkent(ndata/4, k3, mu3, beta3)
mu4 <- c(0.2, -1, 0.2)
mu4 <- mu4 / sqrt( sum(mu4^2) )
k4=20
beta4=0
data4 <- rkent(ndata/4, k4, mu4, beta4)
data=rbind(data1, data2, data3, data4)
plot3d(data)
library(fdaPDE)
plot3d(data)
data1 <- 0.25*rkent(ndata, k1, mu1, beta1) +
0.25*rkent(ndata, k2, mu2, beta2) +
0.25*rkent(ndata, k3, mu3, beta3) +
0.25*rkent(ndata, k4, mu4, beta4)
open3d()
plot3d(data1)
data1 <- 0.25*rkent(ndata, k1, mu1, beta1)
open3d()
plot3d(data1)
data1 <- 0.25*rkent(ndata, k1, mu1, beta1) +
0.25*rkent(ndata, k2, mu2, beta2)
open3d()
plot3d(data1)
data1 <- 0.25*rkent(ndata, k1, mu1, beta1)
open3d()
plot3d(data1)
data1 <- 0.25*rkent(ndata, k1, mu1, beta1)
data2<-  0.25*rkent(ndata, k2, mu2, beta2)
open3d()
plot3d(data1)
open3d()
plot3d(data2)
dataa <- data1 + data2
open3d()
plot3d(dataa)
rm(list=ls())
while (rgl.cur() > 0) { rgl.close() }
setwd("home/clara/Documenti/PACSProject/PACSGhilottiPigolotti)
setwd("home/clara/Documenti/PACSProject/PACSGhilottiPigolotti")
setwd("/home/clara/Documenti/PACSProject/PACSGhilottiPigolotti")
library(Matrix)
library(Matrix)
